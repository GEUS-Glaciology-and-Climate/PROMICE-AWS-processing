
#+PROPERTY: header-args:jupyter-python :kernel PROMICE_dev :session PROMICE-README

* Table of contents                               :toc_2:noexport:
- [[#introduction][Introduction]]
  - [[#overview][Overview]]
  - [[#level-00][Level 00]]
  - [[#level-0][Level 0]]
  - [[#level-0m][Level 0M]]
  - [[#level-1][Level 1]]

* Introduction

Code used to process the PROMICE AWS data from Level 0 through Level 3 (end-user product).

We use the following processing levels, described textually and graphically.

** Overview
+ L00 : Sensor data in the CR-1000 logger
+ L0: Raw data from L00 in CSV file format with suggested filenames and organized by station folder
  + =raw=, =STM= (Slim Table Memory), and =TX= (transmitted)
+ L0M: (MANUAL)
  + Standardized NEAD headers for =raw=, =STM=, and =TX=
  + Manually split so no file includes changed sensors
  + Precise file names
+ L1:
  + Engineering units (e.g. current or volts) converted to physical units (e.g. temperature or wind speed)
+ L1A:
  + Invalid / bad / suspicious data flagged
  + Files merged to one time series per station
+ L2:
  + Ancillary data from other sensors (e.g. radiometric correction requires input of tilt sensor)
+ L3:
  + Derived products (e.g. SHF and LHF)
  + Merge formats to one product here?

#+begin_src ditaa :file ./fig/levels.png :exports results

                    +----------------+
	            |{d}             |                         Legend
                    | Digital counts |                         +---------------+
     Level 00 (L00) |                |                         |input          |
		    | CR-1000 logger |                         +---------------+
	            |                |
	            +-------+--------+                         +---------------+   +=----+
	                    |				       |{io}process    +--=+ Note|
	                    v				       +---------------+   +-----+
                    +----------------+
	            |{io}            |                         +---------------+
                    |  Manual Carry  |      		       |{d}Files       |
                    |      or        |      		       +---------------+
		    |   Satellite    |
	            |                |			
	            +-------+--------+			
	                    |               +=---------------------------------+            
	                    v            +--+Arbitrary file names              |            
                    +----------------+   |  |Repeat data (more than 1 download)|            
	            |{d}             |   |  |More than 1 sensor per file       |
                    |  raw, STM, TX  +=--+  +----------------------------------+
     Level 0 (L0)   |                |      
		    | GEUS text files|	    
	            |                |	    
	            +-------+--------+	    	   						    
	                    |		         	        /----------------------------------\ 		
	                    v		                   +----+ Split files by sensor changes{io}| 		
                    +----------------+                     |    +----------------------------------+ 		
	            |{io}            |	                   |					    
                    |  Copy L0 to    |	                   |    +--------------------+		    
                    |       L0M      |                     +----+ Precise file names | 		    
	            |                |	   +---------------+    +--------------------+		    
	            +-------+--------+     |               |					    
                            |              |               |    +--------------------+		    
                            v              |               +----+ NEAD headers       |		    
		    +-------+---------+    |	    	        +--------------------+		    
		    |{d}              |    |     	          ^      ^     ^			    
                    |     Manual      |    |                      |      |     |			    
     Level 0M (L0M) |                 |<---+                      |      |   +-+----------+	    
		    | Standardization |                           |      |   |Metadata    |	    
		    |                 |                           |      |   +------------+	    
 		    +-------+---------+                           |    +-+----------------+	    
			    |	      	                          |    |Columns, units, ..|	    
                            v               	                  |    +------------------+	    
	            +-----------------+           	        +-+---------------------------------+
	            |{io}             |                         | Instrument calibration parameters |
	            |  Engineering to |   	   	        |      (recorded, not applied)      |
	            |  physical units |                         +-----------------------------------+
	            |                 |   
                    +-------+---------+   
		            |      	  
	                    v             
                    +-----------------+   
		    |{d}              |   
    Level 1 (L1)    |Measured physical|   
		    |    properties   |
		    |                 |
		    +-------+---------+	  
                            |		  
                            v		  
                    +-----------------+
                    |{io}             |
                    |   Flag bad data |
                    |   Merge files   |
                    |                 |
                    +-------+---------+
                            |           
                            v          
                   +-------------------+
                   |{d}                |
    Level 1A (L1A) |Time series per AWS|
                   |  Initial data QC  |
		   |                   |
                   +-------+-----------+
                           |
                           v
                    +-----------------+
                    |{io}             |       +=------------------------------------------+ 
                    | Cross-sensor    |------=+e.g. ice at 1 m depth via interpolation, or| 
                    |  corrections    |       |radiation adjusting for platform rotation  |
                    |                 |       +-------------------------------------------+ 
                    +-------+---------+       
                            |          
                            v          
                   +-------------------+
                   |{d}                |
     Level 2 (L2)  |  Derived internal |
                   |      values       |
	           |                   |
                   +-------+-----------+
                           |
                           v
                    +-----------------+
                    |{io}             |
                    |     Derive      |       +=-----------------------+
                    |    external     |------=+e.g. sensible heat flux,|
                    |   properties    |       |latent heat flux        |
                    |                 |       +------------------------+
                    +-------+---------+
                            |          
                            v          
                   +-------------------+
                   |{d}                |
     Level 3 (L3)  |  Derived external |
                   |      values       |
		   |                   |
                   +-------------------+


#+END_SRC
		    
#+RESULTS:
[[file:./fig/levels.png]]

** Level 00

+ Digital numbers (DN) in the CR1000 logger.

** Level 0

Level 00 is converted to Level 0 in the CR1000 logger during download, or after the DNs are broadcast to the satellite and processed by the MCIT_script (see https://github.com/GEUS-PROMICE/awsrx).

#+begin_src plantuml :file ./fig/L00_to_L0.png :exports results
@startuml

' plantuml activity diagram (beta)

component Sensor_1
component Sensor_n

frame CR1000_Logger {
  database DB_logger [
  <b>Database</b>
  10 minute sampling
  ----
  var0, var1, ..., varn
] 
}

note right
  Level 00 (L00)
end note

Sensor_1 --> CR1000_Logger
Sensor_n --> CR1000_Logger

node GEUS_(Level_0) {
  file Raw [
  <b>raw</b>
  10 min sampling
  ]

  file SlimTableMem [
  <b>SlimTableMem</b>
  Hourly average from
  10 min sampling
  ]

  file TX [
  <b>TX</b>
  V3:
    DOY 100 to 300: hourly average
    DOY 300 to 100: daily average
  V4:
    hourly average all days
  ]
}

' DB -> hand carry -> raw
actor Scientist
DB_logger --> Scientist : Field\ndownload
Scientist --> Raw : Hand\ncarry
Scientist --> SlimTableMem : Hand\ncarry

' DB -> satellite -> Transmitted
cloud Satellite
file Email
queue MCIT_script

DB_logger -[dashed]-> Satellite : Data subsampled and\npossible transmission loss
Satellite -[dashed]-> Email
Email --> MCIT_script : L00
MCIT_script --> TX

@enduml
#+end_src

#+RESULTS:
[[file:./fig/L00_to_L0.png]]

*** L0 files

+ =raw= : All 10-minute data stored on the CF-card (external module on CR1000)
+ =SlimTableMem= : Hourly averaged 10-min data stored in the internal logger memory
+ =transmitted= : Transmitted via satellite. Only a subset of data is transmitted, and only hourly or daily average depending on station and day of year.

Level 0 files are stored in the =data/L0/<S>/= folder, where =<S>= is the station name. File names should encode the station, end-of-year of download, a version number if there are multiple files for a given year, and the format. However, no code reads thees files, so there is no strict file naming convention. Still, best practices would use the following conventions:  

=data/<L>/<S>/<S>-<Y>[.<n>]-<F>.txt=

Where 

+ =<L>= is the processing level
  + =<L>= must be one of the following: [L0, L0M, L1, L1A, L2, L3]
+ =<S>= is a station ID
  + =<S>= must be one of the following strings: [CEN, EGP, KAN_B, KAN_L, KAN_M, KAN_U, KPC_L, KPC_U, MIT, NUK_K, NUK_L, NUK_N, NUK_U, QAS_A, QAS_L, QAS_M, QAS_U, SCO_L, SCO_U, TAS_A, TAS_L, TAS_U, THU_L, THU_U, UPE_L, UPE_U]
+ =<Y>= is a four-digit year with a value greater than =2008=
  + =<Y>= should represent the year at the last timestamp in the file
  + Optionally, =.<n>= is a version number if multiple files from the same year are present
+ =<F>= is the format, one of =raw=, =TX=, or =STM=


** Level 0M

Level 0M (L0M) is L0 with the following *manual* changes:

+ Files that will continue in the processing pipeline are copied from =L0/<S>/= to =L0M/<S>/= folders.
+ Strict naming format must be followed: =data/L0M/<S>/<S>-<Y>[.<n>]-<F>.txt= (see L0 naming suggestion above, now a requirement)
+ Headers, if present, are standardized to NEAD 1.0 format
  + NEAD header templates are provided, or should be copied from existing files and updated for the new data/sensors/loggers/etc.
  + NEAD headers should include instrument calibration parameters, serial numbers, etc.
  + Existing headers, if they exist, are removed. Any information that should be retained is incorporated into the NEAD header. The L0 data will always retain the original unmodified header if it is needed.
  + NEAD format specification: https://github.com/GEUS-PROMICE/NEAD/
+ Split files if necessary
  + Files should be split so that each file only contains one of each sensor. That is if a station visit swapped sensor X with Y, then two files should exist, one with X (with metadata such as serial number, calibration paramater, etc. for X), and one with Y (with associated metadata).

All changes should be documented in the [[./data/L0M/README.org]] file.
    
*** Format

We use the [[https://github.com/mankoff/NEAD/][NEAD 1.0]] file format with PROMICE-specific headers. A detailed description of the format is at https://github.com/GEUS-PROMICE/NEAD and a Python reader is at https://github.com/GEUS-PROMICE/pyNEAD.

*** Additional files

Any files that do not conform to the above name format requirement will be ignored. However, for cleanliness, additional files should be placed in sub-folders of =L0/<S>=. If any additional files are created in order to manually adjust problematic data or for any other purpose, an entry should be created in the top level =data/README.org= linking to the original file, the new file, describing what was done and why, and perhaps including a diff.

*** L0M Reader

#+BEGIN_SRC jupyter-python
import nead
ds = nead.read("./data/L0M/EGP/EGP-2016-raw.txt", index_col=0)
print(ds)
#+END_SRC

#+RESULTS:
#+begin_example
<xarray.Dataset>
Dimensions:      (time: 10847)
Coordinates:
  ,* time         (time) datetime64[ns] 2016-05-01T14:30:00 ... 2016-07-19T17:...
Data variables:
    rec          (time) float64 51.0 52.0 53.0 ... 1.09e+04 1.09e+04 1.09e+04
    min_y        (time) float64 1.765e+05 1.766e+05 ... 2.905e+05 2.905e+05
    p            (time) float64 724.4 724.1 724.4 724.4 ... 730.8 731.2 730.7
    t            (time) float64 -20.1 -19.79 -19.31 ... -6.904 -6.904 -6.861
    t_hygroclip  (time) float64 -19.56 -19.11 -18.92 ... -6.866 -6.86 -6.799
    rh           (time) float64 54.1 51.7 50.23 49.51 ... 80.28 80.93 81.81
    wspd         (time) float64 1.062 0.918 0.636 0.486 ... 2.793 2.951 3.069
    wdir         (time) float64 265.1 259.2 216.8 208.4 ... 217.7 216.6 225.4
    wd_std       (time) float64 0.0 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0 0.0
    dswr         (time) float64 681.7 732.4 688.3 689.6 ... 724.7 711.4 698.8
    uswr         (time) float64 518.6 559.3 531.8 534.4 ... 559.2 549.6 524.1
    dlwr         (time) float64 -81.57 -102.0 -101.3 ... -135.8 -135.6 -132.4
    ulwr         (time) float64 -23.97 -28.65 -33.92 ... -32.33 -32.52 -28.84
    t_rad        (time) float64 -12.78 -11.42 -9.929 ... -1.114 -1.03 -1.135
    z_s_boom     (time) float64 2.685 2.683 2.683 2.68 ... 2.583 2.584 2.58
    z_s_boom_q   (time) float64 190.0 192.0 189.0 187.0 ... 192.0 182.0 168.0
    z_s_stake    (time) float64 nan nan nan nan nan nan ... nan nan nan nan nan
    z_s_stake_q  (time) float64 0.0 0.0 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0 0.0
    z_i          (time) float64 nan nan nan nan nan nan ... nan nan nan nan nan
    t_i_1        (time) float64 nan -109.0 -109.0 ... -8.478 -8.458 -8.448
    t_i_2        (time) float64 nan nan -109.0 -109.0 ... -9.67 -9.67 -9.67
    t_i_3        (time) float64 nan -109.0 -109.0 ... -8.879 -8.859 -8.849
    t_i_4        (time) float64 nan -109.0 -109.0 ... -10.74 -10.73 -10.74
    t_i_5        (time) float64 nan -109.0 -109.0 ... -12.67 -12.67 -12.67
    t_i_6        (time) float64 nan -109.0 nan -109.0 ... -14.9 -14.9 -14.9
    t_i_7        (time) float64 nan -109.0 -109.0 nan ... -17.16 -17.16 -17.16
    t_i_10       (time) float64 nan nan -109.0 nan ... -20.75 -20.76 -20.76
    tilt_x       (time) float64 3.527 3.492 3.516 3.489 ... 0.109 0.095 0.174
    tilt_y       (time) float64 -0.945 -0.938 -0.924 ... -0.828 -0.849 -0.859
    gps_t        (time) object nan nan nan ... 'GT170007.00' 'GT170007.00'
    gps_lat      (time) object nan nan nan ... 'NH7537.47563' 'NH7537.47563'
    gps_lon      (time) object nan nan nan ... 'WH03558.49655' 'WH03558.49655'
    gps_alt      (time) float64 nan nan nan ... 2.663e+03 2.663e+03 2.663e+03
    gps_giodal   (time) float64 nan nan nan nan nan ... 41.6 41.6 41.6 41.6 41.6
    gps_geounit  (time) object nan nan nan nan nan nan ... 'M' 'M' 'M' 'M' 'M'
    gps_q        (time) float64 nan nan nan nan nan nan ... 1.0 1.0 1.0 1.0 1.0
    gps_numsat   (time) float64 nan nan nan nan nan ... 11.0 12.0 12.0 12.0 12.0
    gps_hdop     (time) float64 nan nan nan nan nan ... 0.71 0.73 0.73 0.73 0.73
    t_logger     (time) float64 -12.6 -12.08 -11.65 ... -1.801 -1.735 -1.5
    fan_dc       (time) float64 137.5 141.3 142.3 141.8 ... 123.5 123.9 124.1
    batt_v_ss    (time) float64 15.52 15.81 15.79 15.81 ... 14.47 14.47 14.47
    batt_v       (time) float64 15.23 15.56 15.53 15.63 ... 14.4 14.41 14.41
Attributes:
    station_id:          EGP
    field_delimiter:     ,
    nodata:              -999
    srid:                EPSG:4326
    geometry:            POINT(-35.9748, 75.6247)
    tz:                  0
    PROMICE_format:      raw
    hygroclip_t_offset:  0
    dswr_eng_coef:       12.71
    uswr_eng_coef:       12.71
    dlwr_eng_coef:       12.71
    ulwr_eng_coef:       12.71
    pt_z_coef:           0
    pt_z_p_coef:         0
    pt_z_factor:         0
    pt_antifreeze:       0
    boom_azimuth:        0
#+end_example



** Level 1

See code for now for the conversion from engineering to physical units.




#!/usr/bin/env python
from argparse import ArgumentParser

from configparser import ConfigParser
import os, imaplib, email
from glob import glob

from tx import getMail, L0tx, sortLines, addTail


def parse_arguments():
	parser = ArgumentParser(description="PROMICE L0 transmission fetcher")       
	parser.add_argument('-a', '--account', default=None, type=str, required=True, 
		        help='Email account .ini file')
	parser.add_argument('-p', '--password', default=None, type=str, required=True, 
		        help='Email credentials .ini file')                      
	parser.add_argument('-o', '--outpath', default='aws_data', type=str, required=True, 
		        help='Path where to write output')            
	parser.add_argument('-f', '--formats', default='payload_formatter.csv', type=str, 				required=True, help='Path to Payload format .csv file')
	parser.add_argument('-t', '--types', default='payload_type.csv', type=str,
			required=True, help='Path to Payload type .csv file')
	parser.add_argument('-i', '--imei', default=None, type=str, required=False, 
		        help='Imei2name .ini file')   
	parser.add_argument('-u', '--uid', default=None, type=str, required=False, 
		        help='Last AWS uid .ini file')	        
	args = parser.parse_args()
	return args


if __name__ == '__main__':
	"""Executed from the command line"""
	args = parse_arguments()

	# Set output file directory
	if not os.path.exists(args.outpath):
	    os.mkdir(args.outpath)

	# Define accounts and credentials ini file paths
	accounts_ini = ConfigParser()
	accounts_ini.readfp(open(args.account))
	accounts_ini.read(args.password) 
		 
	# Get credentials
	account = accounts_ini.get('aws', 'account')
	server = accounts_ini.get('aws', 'server')
	port = accounts_ini.getint('aws', 'port')    
	password = accounts_ini.get('aws', 'password')
	if not password:
	    password = input('password for AWS email account: ')
	print('AWS data from server %s, account %s' %(server, account))
	    
	# Retrieve last aws uid from ini file
	try:
	    with open(args.uid, 'r') as last_uid_f:
		last_uid = int(last_uid_f.readline())
	except Exception:
	    last_uid = int(input('last_aws_uid.ini not found, first UID? (default = 1)') or 1)

	# Log in to email server
	mail_server = imaplib.IMAP4_SSL(server, port)
	typ, accountDetails = mail_server.login(account, password)
	if typ != 'OK':
	    print('Not able to sign in!')
	    raise
	    
	# Grab new emails
	result, data = mail_server.select(mailbox='"[Gmail]/All Mail"', readonly=True)
	print('mailbox contains %s messages' %data[0])

	# Get L0tx datalines from email transmissions
	for uid, mail in getMail(mail_server, last_uid=last_uid):
	    message = email.message_from_string(mail)
	    l0 = L0tx(message, args.format, args.type)
	    
	    if l0.msg:            

		out_fn = 'AWS_%s%s.txt' % (l0.imei, l0.flag)
		out_path = os.sep.join((args.outpath, out_fn))

		print(f'Writing to {out_fn}')
		print(l0.msg)
	    
		with open(out_path, mode='a') as out_f:
		    out_f.write(l0.msg + '\n')    

	# Sort L0tx files and add tails if imei2name file given
	if args.imei:   
		imei_ini = ConfigParser()
		imei_ini.readfp(open(args.imei))
		imei_names = dict(imei_ini.items('imei_to_name'))
		for f in glob(args.outpath+'/*.txt'):
		    
		    # Sort lines in L0tx file and remove duplicates
		    in_dirn, in_fn = os.path.split(f)    
		    out_fn = 'sorted_' + in_fn
		    out_pn = os.sep.join((in_dirn, out_fn))
		    sortLines(f, out_pn)

		    # Generate tail files
		    out_dir = os.sep.join((in_dirn, 'tails')) 
		    if not os.path.exists(out_dir):
			os.mkdir(out_dir)
		    imei = in_fn.split('.txt')[0].split('_')[1]        
		    name = imei_names.get(imei, 'UNKNOWN')
		    addTail(f, out_dir, name)
	    
	# Close mail server if open
	if 'mail_server' in locals():
	    print(f'\nClosing {account}')
	    mail_server.close()
	    resp = mail_server.logout()
	    assert resp[0].upper() == 'BYE'

	# Write last aws uid to ini file
	try:
	    with open(args.uid, 'w') as last_uid_f:
		last_uid_f.write(uid)
	except:
	    print(f'Could not write last uid {uid} to {args.uid}')
	
	print('Finished')


else:
    """Executed on import"""
    pass
        
